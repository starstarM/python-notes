生成器（Generators）
要理解迭代器需要先理解迭代器（iterators）。维基百科说，迭代器是一个让程序员可以遍历一个容器（特别是列表）的对象。然而，一个迭代器在遍历并读取一个容器的数据元素时，并不会执行一个迭代。这句话有三个部分：
·可迭代对象（iterable）
·迭代器（iterator）
·迭代（iteration）

可迭代对象（Iterable）
Python中任意的对象，只要它定义了可以返回一个迭代器的__iter__方法，或者定义可以支持下标索引的__getitem__方法，那么它就是一个可迭代对象。

迭代器（Iterator）
任意对象，只要定义了next（python2）或者__next__方法，它就是一个迭代器

迭代（Iteration）
迭代就是从 某个地方（比如一个列表）取出一个元素的过程。当我们使用一个循环来遍历某个东西时，这个过程本身就叫迭代。

生成器（Generators）
生成器是跌迭代器的一种，但只能对其迭代一次。因为生成器并没有把所有值存在内存中，而是在运行时生成值。你通过遍历来使用它们，要么用一个for循环，要么将它们传递给任何可以进行迭代的函数和结构。大多时候生成器是以函数来实现的。**然而，它们并不返回一个值，而是 yield （我理解为：生成）一个值**。

实例：
计算斐波那契数列的生成器：
def faibon(n):
	a, b = 1
	for i in range(n):
		yield a
		a, b = b, a+b
for item in fibon(1000):
	print(item)

